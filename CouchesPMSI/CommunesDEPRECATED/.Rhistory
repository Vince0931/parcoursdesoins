correspondance <- read.table("laposte_hexasmal.csv",sep=";")
View(correspondance)
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T)
View(correspondance)
geoPMSI <- read.table("codepost2015.csv",sep="\t")
View(geoPMSI)
geoPMSI <- read.table("codepost2015.csv",sep="\t",header=T)
View(geoPMSI)
colnames(geoPMSI)
str(geoPMSI)
colnames(geoPMSI)
colnames(correspondance)
colnames(geoPMSI)
colnames(geoPMSI) <- c("Code_postal","Nom_poste","pop_poste","pop_geo","Code_geo","temp")
all(is.na(geoPMSI$temp))
geoPMSI$temp <- NULL
View(correspondance)
colnames(correspondance)
colonnes <- c("Code_commune_INSEE","Code_postal")
all(colonnes %in% colnames(correspondance))
bool <- all(colonnes %in% colnames(correspondance))
if (!bool){
stop("colonnes sélectionnées non trouvées")
}
geoPMSI <- read.table("codepost2015.csv",sep="\t",header=T)
Nomcolonnes <- c("Code_commune_INSEE","Code_postal")
colonnes <- which(colnames(correspondance) %in% Nomcolonnes)
colonnes
correspondance <- correspondance[,colonnes]
View(correspondance)
colnames(geoPMSI)
colnames(geoPMSI) <- c("Code_postal","Nom_poste","pop_poste","pop_geo","Code_geo","temp")
all(is.na(geoPMSI$temp)) ### dernière colonne incompréhensible
geoPMSI$temp <- NULL
colnames(geoPMSI)
correspondance <- unique(correspondance)
geoPMSI <- unique(geoPMSI)
geoPMSIcommune <- merge (geoPMSI, correspondance, by="Code_postal")
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
voir <- subset (geoPMSI, !bool)
View(voir)
View(correspondance)
View(geoPMSI)
View(correspondance)
geoPMSI <- geoPMSI[order(geoPMSI$Code_postal),]
View(geoPMSI)
correspondance <- correspondance[order(correspondance$Code_postal),]
View(correspondance)
rm(list=ls())
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T)
colnames(correspondance)
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T,stringsAsFactors = F)
colnames(correspondance)
View(correspondance)
View(correspondance)
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T, colClasses = "factor")
View(correspondance)
colnames(correspondance)
Nomcolonnes <- c("Code_commune_INSEE","Code_postal")
bool <- all(Nomcolonnes %in% colnames(correspondance))
if (!bool){
stop("colonnes sélectionnées non trouvées")
}
colonnes <- which(colnames(correspondance) %in% Nomcolonnes)
correspondance <- correspondance[,colonnes]
correspondance <- unique(correspondance)
geoPMSI <- read.table("codepost2015.csv",sep="\t",header=T)
colnames(geoPMSI) <- c("Code_postal","Nom_poste","pop_poste","pop_geo","Code_geo","temp")
all(is.na(geoPMSI$temp)) ### dernière colonne incompréhensible
geoPMSI$temp <- NULL
colnames(geoPMSI)
geoPMSI <- unique(geoPMSI)
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
voir <- subset (geoPMSI, !bool)
View(voir)
unmatch <- subset (geoPMSI, !bool)
sum(bool)
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
unmatch <- subset (geoPMSI, !bool)
sum(bool)
geoPMSI <- unique(geoPMSI)
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
unmatch <- subset (geoPMSI, !bool)
sum(bool)
View(unmatch)
sum(!bool)
length(unique(correspondance$Code_postal))
correspondance <- unique(correspondance)
length(unique(correspondance$Code_postal))
View(correspondance)
correspondance <- correspondance[order(correspondance$Code_postal),]
geoPMSI <- geoPMSI[order(geoPMSI$Code_postal),]
View(correspondance)
length(unique(correspondance$Code_commune_INSEE))
tab <- table(correspondance$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
tab
voir <- subset (correspondance, Code_commune_INSEE %in% names(tab))
View(voir)
voir <- voir[order(voir$Code_commune_INSEE),]
View(voir)
length(tab)
colnames(geoPMSI)
geoPMSI <- subset (geoPMSI, select=c("Code_postal","Code_geo"))
geoPMSI <- unique(geoPMSI)
geoPMSIcommune <- merge (geoPMSI, correspondance, by="Code_postal")
View(geoPMSIcommune)
geoPMSIcommune$Code_postal <- NULL
geoPMSIcommune <- unique(geoPMSIcommune)
length(unique(geoPMSIcommune$Code_commune_INSEE))
tab <- table(geoPMSIcommune$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
tab
voir <- subset (geoPMSIcommune, Code_commune_INSEE %in% names(tab))
View(voir)
voir <- voir[order(voir$Code_geo),]
View(voir)
voir <- voir[order(voir$Code_commune_INSEE),]
View(voir)
length(unique(geoPMSIcommune$Code_geo))
rm(list=ls())
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T, colClasses = "factor")
colnames(correspondance)
Nomcolonnes <- c("Code_commune_INSEE","Code_postal")
bool <- all(Nomcolonnes %in% colnames(correspondance))
if (!bool){
stop("colonnes sélectionnées non trouvées")
}
colonnes <- which(colnames(correspondance) %in% Nomcolonnes)
correspondance <- correspondance[,colonnes]
correspondance <- unique(correspondance)
correspondance <- correspondance[order(correspondance$Code_postal),]
geoPMSI <- read.table("codepost2015.csv",sep="\t",header=T)
colnames(geoPMSI) <- c("Code_postal","Nom_poste","pop_poste","pop_geo","Code_geo","temp")
all(is.na(geoPMSI$temp)) ### dernière colonne incompréhensible
geoPMSI$temp <- NULL
colnames(geoPMSI)
geoPMSI <- unique(geoPMSI)
geoPMSI <- geoPMSI[order(geoPMSI$Code_postal),]
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
unmatch <- subset (geoPMSI, !bool)
sum(!bool) #### 238 codes postaux non présents dans la table de correspondance :
length(unique(correspondance$Code_postal))
length(unique(correspondance$Code_commune_INSEE))
tab <- table(correspondance$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
tab
length(tab) ## 266 communes
tab
length(tab) ## 266 communes avec plusieurs codes postaux
voir <- subset (correspondance, Code_commune_INSEE %in% names(tab))
voir <- voir[order(voir$Code_commune_INSEE),]
colnames(geoPMSI)
colnames(geoPMSI)
geoPMSI <- subset (geoPMSI, select=c("Code_postal","Code_geo"))
geoPMSI <- unique(geoPMSI)
geoPMSI <- geoPMSI[order(geoPMSI$Code_postal),]
geoPMSIcommune <- merge (geoPMSI, correspondance, by="Code_postal")
geoPMSIcommune$Code_postal <- NULL
geoPMSIcommune <- unique(geoPMSIcommune)
length(unique(geoPMSIcommune$Code_commune_INSEE))
tab <- table(geoPMSIcommune$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
voir <- subset (geoPMSIcommune, Code_commune_INSEE %in% names(tab))
voir <- voir[order(voir$Code_commune_INSEE),]
length(unique(geoPMSIcommune$Code_geo)) ### 5822 codes géo
length(unique(geoPMSIcommune$Code_commune_INSEE))
rm(list=ls())
correspondance <- read.table("laposte_hexasmal.csv",sep=";",header=T, colClasses = "factor")
colnames(correspondance)
Nomcolonnes <- c("Code_commune_INSEE","Code_postal")
bool <- all(Nomcolonnes %in% colnames(correspondance))
if (!bool){
stop("colonnes sélectionnées non trouvées")
}
colonnes <- which(colnames(correspondance) %in% Nomcolonnes)
correspondance <- correspondance[,colonnes]
correspondance <- unique(correspondance)
correspondance <- correspondance[order(correspondance$Code_postal),]
geoPMSI <- read.table("codepost2015.csv",sep="\t",header=T)
colnames(geoPMSI) <- c("Code_postal","Nom_poste","pop_poste","pop_geo","Code_geo","temp")
all(is.na(geoPMSI$temp)) ### dernière colonne incompréhensible
geoPMSI$temp <- NULL
colnames(geoPMSI)
geoPMSI <- subset (geoPMSI, select=c("Code_postal","Code_geo"))
geoPMSI <- unique(geoPMSI)
geoPMSI <- geoPMSI[order(geoPMSI$Code_postal),]
bool <- geoPMSI$Code_postal %in% correspondance$Code_postal
unmatch <- subset (geoPMSI, !bool)
sum(!bool) #### 238 codes postaux non présents dans la table de correspondance :
length(unique(correspondance$Code_postal))
length(unique(correspondance$Code_commune_INSEE))
tab <- table(correspondance$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
tab
length(tab) ## 266 communes avec plusieurs codes postaux
voir <- subset (correspondance, Code_commune_INSEE %in% names(tab))
voir <- voir[order(voir$Code_commune_INSEE),]
geoPMSIcommune <- merge (geoPMSI, correspondance, by="Code_postal")
geoPMSIcommune$Code_postal <- NULL
geoPMSIcommune <- unique(geoPMSIcommune)
length(unique(geoPMSIcommune$Code_commune_INSEE))
tab <- table(geoPMSIcommune$Code_commune_INSEE)
bool <- tab > 1
tab <- subset (tab, bool)
voir <- subset (geoPMSIcommune, Code_commune_INSEE %in% names(tab))
voir <- voir[order(voir$Code_commune_INSEE),]
length(unique(geoPMSIcommune$Code_geo)) ### 5822 codes géo
length(unique(geoPMSIcommune$Code_commune_INSEE))
View(geoPMSIcommune)
save(geoPMSIcommune,file="geoPMSIcommune.rdata")
rm(list=ls())
library(rgdal)
library(maptools)
EPSG <- make_EPSG()
bool <- EPSG$code == 2154 & !is.na(EPSG$code)
RGF93 <- EPSG$prj4[bool]
RGF93prj4 <- CRS(RGF93)
fichier <- "GEOFLA_2-2_COMMUNE_SHP_LAMB93_FXX_2016-06-28/GEOFLA/1_DONNEES_LIVRAISON_2016-06-00236/GEOFLA_2-2_SHP_LAMB93_FR-ED161/COMMUNE/COMMUNE.shp"
communes <- readShapePoly(fichier,proj4string = RGF93prj4)
load("../geoPMSI/geoPMSIcommune.rdata")
load("geoPMSIcommune.rdata")
dep33 <- subset (communes, CODE_DEPT =="33")
geoPMSIcommune33 <- subset (geoPMSIcommune, Code_commune_INSEE %in% dep33$INSEE_COM)
any(duplicated(geoPMSIcommune33$Code_commune_INSEE)) ## aucune commune appartient à plusieurs codes géo PMSI
dep33 <- merge (dep33, geoPMSIcommune33, by.x="INSEE_COM",by.y="Code_commune_INSEE")
geoPMSIcommune33 <- NULL
bool <- dep33$INSEE_COM %in% geoPMSIcommune$Code_commune_INSEE
all(bool) ### tous les codes insee geofla sont connues de la table geoPMSI
length(unique(dep33$Code_geo)) ### 94 codes géographiques en Gironde
habitants <- tapply(dep33$POPULATION, as.character(dep33$Code_geo),sum)
boxplot(habitants)
habitants <- data.frame(Code_geo = names(habitants), habitants=as.numeric(habitants))
voir <- dep33@data
voir <- voir[with(voir,order(Code_geo,-POPULATION)),]
communesjoined <- tapply(voir$NOM_COM, as.character(voir$Code_geo), function(x){
paste (x, collapse=";")
})
communesjoined <- data.frame(Code_geo = names(communesjoined),
communes=as.character(communesjoined))
communesjoined <- communesjoined[order(communesjoined$Code_geo),]
codegeo <- merge (communesjoined, habitants,by="Code_geo")
habitants <- NULL
communesjoined <- NULL
EPSG <- NULL
voir <- NULL
geoPMSI33 <- unionSpatialPolygons(dep33, IDs = dep33$Code_geo)
plot(geoPMSI33)
centroides <- rgeos::gCentroid(geoPMSI33,byid = T)
points(centroides,col="red",pch=19)
rownames(codegeo) <- codegeo$Code_geo
geoPMSI33 <- SpatialPolygonsDataFrame(geoPMSI33, codegeo)
bool <- grepl(";",geoPMSI33$communes)
sum(bool) ## 64 codes géo composés d'au moins 2 communes
geoPMSI33$couleurs <- ifelse(bool, "orange","skyblue")
plot(geoPMSI33, col=geoPMSI33$couleurs)
load("../FINESS/locEtab.rdata")
locEtab33 <- subset (locEtab, substr(locEtab$INSEE_COM,1,2) == 33)
load("../../FINESS/locEtab.rdata")
locEtab33 <- subset (locEtab, substr(locEtab$INSEE_COM,1,2) == 33)
locEtab33CH <- subset (locEtab33, categetab == "355")
locEtab33CH$X <- as.numeric(as.character(locEtab33CH$X))
locEtab33CH$Y <- as.numeric(as.character(locEtab33CH$Y))
coordinates(locEtab33CH) <- ~ X + Y
class(locEtab33CH)
proj4string(locEtab33CH) <- RGF93prj4
x0 <- 371348.5
y0 <- 6401264
x1 <- 412463.6
y1 <- 6455044
fleche <- arrows(x0, y0,x1,y1,length=0.1)
points(locEtab33CH,col="red",pch=18)
